/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';
import {CustomHttpUrlEncodingCodec} from '../encoder';

import {Observable} from 'rxjs';

import {CreateShopDto} from '../model/createShopDto';
import {ResetPasswordDto} from '../model/resetPasswordDto';
import {SendCreateLinkDto} from '../model/sendCreateLinkDto';
import {SendPasswordResetLinkDto} from '../model/sendPasswordResetLinkDto';
import {ShopDetailDto} from '../model/shopDetailDto';
import {ShopListDto} from '../model/shopListDto';
import {ShopOwnerDetailDto} from '../model/shopOwnerDetailDto';
import {UpdateShopDto} from '../model/updateShopDto';

import {BASE_PATH} from '../variables';
import {Configuration} from '../configuration';


@Injectable()
export class ShopControllerService {

    protected basePath = '//localhost:4200/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * createShop
     *
     * @param body request
     * @param token token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createShopUsingPOST(body: CreateShopDto, token: string, observe?: 'body', reportProgress?: boolean): Observable<ShopDetailDto>;
    public createShopUsingPOST(body: CreateShopDto, token: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ShopDetailDto>>;
    public createShopUsingPOST(body: CreateShopDto, token: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ShopDetailDto>>;
    public createShopUsingPOST(body: CreateShopDto, token: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createShopUsingPOST.');
        }

        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling createShopUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (token !== undefined && token !== null) {
            queryParameters = queryParameters.set('token', <any>token);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ShopDetailDto>('post',`${this.basePath}/api/shop`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getDetails
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDetailsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<ShopOwnerDetailDto>;
    public getDetailsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ShopOwnerDetailDto>>;
    public getDetailsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ShopOwnerDetailDto>>;
    public getDetailsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ShopOwnerDetailDto>('get',`${this.basePath}/api/shop/me`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getDetails
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDetailsUsingGET1(id: string, observe?: 'body', reportProgress?: boolean): Observable<ShopDetailDto>;
    public getDetailsUsingGET1(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ShopDetailDto>>;
    public getDetailsUsingGET1(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ShopDetailDto>>;
    public getDetailsUsingGET1(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDetailsUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ShopDetailDto>('get',`${this.basePath}/api/shop/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listNearby
     *
     * @param location location
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listNearbyUsingGET(location: string, observe?: 'body', reportProgress?: boolean): Observable<ShopListDto>;
    public listNearbyUsingGET(location: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ShopListDto>>;
    public listNearbyUsingGET(location: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ShopListDto>>;
    public listNearbyUsingGET(location: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (location === null || location === undefined) {
            throw new Error('Required parameter location was null or undefined when calling listNearbyUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (location !== undefined && location !== null) {
            queryParameters = queryParameters.set('location', <any>location);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ShopListDto>('get',`${this.basePath}/api/shop/nearby`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listNearby
     *
     * @param location location
     * @param query query
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listNearbyUsingGET1(location: string, query: string, observe?: 'body', reportProgress?: boolean): Observable<ShopListDto>;
    public listNearbyUsingGET1(location: string, query: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ShopListDto>>;
    public listNearbyUsingGET1(location: string, query: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ShopListDto>>;
    public listNearbyUsingGET1(location: string, query: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (location === null || location === undefined) {
            throw new Error('Required parameter location was null or undefined when calling listNearbyUsingGET1.');
        }

        if (query === null || query === undefined) {
            throw new Error('Required parameter query was null or undefined when calling listNearbyUsingGET1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (location !== undefined && location !== null) {
            queryParameters = queryParameters.set('location', <any>location);
        }
        if (query !== undefined && query !== null) {
            queryParameters = queryParameters.set('query', <any>query);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ShopListDto>('get',`${this.basePath}/api/shop/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * resetPassword
     *
     * @param body request
     * @param token token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetPasswordUsingPOST(body: ResetPasswordDto, token: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public resetPasswordUsingPOST(body: ResetPasswordDto, token: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public resetPasswordUsingPOST(body: ResetPasswordDto, token: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public resetPasswordUsingPOST(body: ResetPasswordDto, token: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling resetPasswordUsingPOST.');
        }

        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling resetPasswordUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (token !== undefined && token !== null) {
            queryParameters = queryParameters.set('token', <any>token);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/api/shop/reset-password`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * sendCreateLink
     *
     * @param body request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sendCreateLinkUsingPOST(body: SendCreateLinkDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public sendCreateLinkUsingPOST(body: SendCreateLinkDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public sendCreateLinkUsingPOST(body: SendCreateLinkDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public sendCreateLinkUsingPOST(body: SendCreateLinkDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling sendCreateLinkUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/api/shop/send-create-link`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * sendPasswordResetLink
     *
     * @param body request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sendPasswordResetLinkUsingPOST(body: SendPasswordResetLinkDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public sendPasswordResetLinkUsingPOST(body: SendPasswordResetLinkDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public sendPasswordResetLinkUsingPOST(body: SendPasswordResetLinkDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public sendPasswordResetLinkUsingPOST(body: SendPasswordResetLinkDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling sendPasswordResetLinkUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/api/shop/send-password-reset-link`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateShop
     *
     * @param body request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateShopUsingPUT(body: UpdateShopDto, observe?: 'body', reportProgress?: boolean): Observable<ShopDetailDto>;
    public updateShopUsingPUT(body: UpdateShopDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ShopDetailDto>>;
    public updateShopUsingPUT(body: UpdateShopDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ShopDetailDto>>;
    public updateShopUsingPUT(body: UpdateShopDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateShopUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ShopDetailDto>('put',`${this.basePath}/api/shop`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
