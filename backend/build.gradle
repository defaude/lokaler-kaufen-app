plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'groovy'
    id 'jacoco'
    id "org.sonarqube" version "2.8"
    // Writes git.properties with commit hash, etc.
    id "com.gorylenko.gradle-git-properties" version "2.2.2"
}

group = 'de.qaware.mercury'
version = '1.2.0-SNAPSHOT'

sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    testCompileOnly {
        extendsFrom testAnnotationProcessor
    }

    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.flywaydb:flyway-core'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'

    // Spring Boot configuration magic
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Lombok
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'

    // Fixes the 'warning: unknown enum constant When.MAYBE' warnings
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    testCompileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    // Swagger for API docs
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'

    // Bcrypt for password hashing
    implementation 'at.favre.lib:bcrypt:0.9.0'

    // Geodesy library for distance calculations
    implementation 'org.gavaghan:geodesy:1.1.3'

    // JWT for the auth tokens
    implementation 'com.auth0:java-jwt:3.10.1'

    // Jollyday for holiday detection
    implementation 'de.jollyday:jollyday:0.5.10'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    // mandatory dependencies for using Spock
    testImplementation platform("org.spockframework:spock-bom:2.0-M2-groovy-2.5")
    testImplementation "org.spockframework:spock-core"
    testImplementation "org.spockframework:spock-spring"

    // Testcontainers for integration tests
    testImplementation 'org.testcontainers:postgresql:1.13.0'

    // Spring Dev Tools for faster reload
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

test {
    // Run gradle with -DskipIntegrationTests to skip integration tests
    if (System.getProperty("skipIntegrationTests") != null) {
        systemProperty("spock.configuration", "SpockNoIntegrationTests.groovy")
    }

    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
    }
}

test.finalizedBy jacocoTestReport

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "qaware_wir-vs-virus"
        property "sonar.organization", "qaware"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

gitProperties {
    // We read last commit and stuff from .git directory
    // This disables the exception if the .git folder isn't found
    failOnNoGitDirectory = false
}

bootJar {
    // Remove version from artifact
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

// have some fun ./gradlew kick ass
task kick(dependsOn: clean) {}

/**
 * Downloads all dependencies for cache warmup
 */
task resolveDependencies(group: "build setup", description: "Resolve and prefetch dependencies") {
    doLast {
        def resolve = {
            ConfigurationContainer configurations ->
                configurations
                    .findAll({ Configuration c -> c.isCanBeResolved() })
                    .each({ Configuration c -> c.resolve() })
        }
        project.rootProject.allprojects.each { Project subProject ->
            resolve(subProject.buildscript.configurations)
            resolve(subProject.configurations)
        }
    }
}